БАЗОВЫЕ ОПЕРАЦИИ

+ # плюс
- # минус
/ # поделить
* # умножить
** # возведение в степень
// # сколько в числе есть чисел. Например 25//5 выведет 5 потому что в числе 25 пять пятерок(5,10,15,20.25)
% # остача при делении
min(данные)
# ищет минимум среди данных
max(данные)
# ищет максимум среди данных
abs(данные)
# число по модулю
pow(число которое возводим в степень, степень)
# возведения числа в определенную степень
round(данные)
# округляет данные
42.607 
# дробные числа, просто через точку
print(sep = " ")
# sep = "тут пишем тип разделителя". эта команда устааклвает определенный разделитель между элементами которые выводим
print (end = "")
# указывает то что будет находиться в конце строки(оьычно это \n (переход на новую строку))
\n 
# переход на новую строку 
\t
# символ  табуляции (ТАВ)
\ 
# указатель что далее идет обычный символ 
print("some\" thing \"")
# выведет слово thing в кавычкх "" если бы мы записали без \ то выдало ошибку 
input()
# берет значения от пользователя (как cin в С++)
# точка с запятой в конце строки не нужна её НЕ ПИСАТЬ!!!

ПЕРЕМЕННЫЕ И ТИПЫ ДАННЫХ

# Нельзя создававть переменные с зарезервироваными именами (например переменную list создать нельзя потому что оно зарезервировано)
# переменную нельзя начинать с цифр или с символов, только с букв!!!
test = 12
# переменная test равна 12
# указывать тип переменной не надо просто пишешь название и пишешь чему равна,
# если в переменной буквы а не числа то пишем так
test = "String"
# равносильно string в С++
mybool = False
# создаеться булевая переменная 
del test
# Удаляет переменную х
str(данные)
# преобразует данные в данные типа string
int(данные)
# преобразует данные в данные типа int(но не все)
float()
# преобразует данные в данные типа float 
num_1 = str(21)
# это уже не число а просто строка c символами 21
num_1 = num_1 + 5    или     num_1 += 5
# увеличение переменной num_1 на 5
num_1 = int(input("Enter num: "))
# пишем так что бы в переменную записывалось число, а не просто символ ввиде числа
Res = ("Enter something ")
Res *= 5
print(Res)
# умножение работает так же и со строками
# код выведет текст Enter something 5 раз

УСЛОВНЫЕ ОПЕРАТОРЫ

==
# Равно
!=
# Не равно
>=
# больше равно 
<=
# меньше равно
>
# больше
<
# меньше
if условие:
    код
elif условие:       # Если условие выше не выполнено а это условие подошло то
    код             # будет выполнен код который пренадлежит этому условию если нет то он просто пропустится
else:               # Если никакое условие не подошло то будет выполнен этот
    код
and
# оператор который отвечает за то что бы при проверке if выполнялось два условия
or
# оператор который отвечает за то что бы при проверке if выполнялось одно из n-го кол-ства условий
name = input()
A = 'Yes' if name != "test" else 'No'
# Тернарный оператор. Смена значения переменнй с помощью условного оператора
if isHappy
# проверяем равна ли переменная True
if !isHappy
# проверяем равна ли переменная False

ЦИКЛЫ И ОПЕРАТОРЫ В НИХ

for переменная-счетчик in range(данные):
# цикл перебора данных
# range - диапазон в котором будет рабоать for
range(1,7)
# будет действовать от 1 до 7 не включительно (1,2,3,4,5,6)
range(с чего начинаем, где заканчиваем, на сколько увеличиваем переменную-счетчик)

word = "Hello world!"
for i in word:
    print (i)
#  выведет не числа а каждый элемент строки word
while условие:
    код
# пока будет подходить условие то будет выполняться код
# break
# выходит из цикла и все
# continue
# пропускает одну итерацию но продолжает выполнения кода просто пропускает один раз цикл
None 
# это пустое значение тоесть пустота

СПИСКИ. ФУНКЦИИ И ИХ МЕТОДЫ 

x = 'dsdsfds'; # Строка а не лист
l=[] # это уже лист с названием l
# что бы использовать функции с листом мы доолжны поставить после названия точку
print (l[2]) 
# выводит второй элемент списка l
print (l[-2]) 
# выводит второй с конца

# функции для списков
l.append (34)
# добавляет число 23 в конец списка l
b = [24,67]
l.extend (b) 
# добавляет элементы списка b в конец списка l
l.insert (1, 56) 
# добавляет число 56 на позицию 1 в список l
l.remove (34) 
# удаляет первый попавшийся элемент со значением 34 из списка l
l.pop (0)
# удаляет первый элемент из списка l, если ничего не ставить то удалит последний элемент
l.sort ()
# сортирует элементы списка l в порядке возрастания
l.reverse () 
# изменяет порядок следования элементов в списке l на противоположны
l.clear ()
# удаляет все элементы из списка l
l.upper()
# возвращает строку и все буквы будут верхним регистром
print (l.index(56)) 
# возвращает индекс первого элемента со значением 56 в списке l
print (l.count(34))
# возвращает количество элементов со значением 34 в списке l

ФУНКЦИЯ СТРОК. ИНДЕКСЫ И СРЕЗЫ

len (данные)
# подсчитывает колчичество символов
l.upper()
# возвращает строку и все буквы будут верхним регистром 
l.isupper()
# возвращает True если все буквы верхнего регистра и False если все буквы нижнего регистра
l.lower()
# возвращает строку и все буквы будут в нижнем регистре 
l.islower()
# возвращает True если все буквы нижнего регистра и False если все буквы верхнего регистра
l.capitalize()
# возвращает строку так что бы первая буква была большая
l.find(значение)
# ищет в строке l нужное значение и возвращает его индекс
l.split(символ)
# разбвает строку на отдельные части по указаному символу 
", ".join(последовательность строк)
# метод используется для объединения последовательности строк с указанным разделителем между строками
my_list = ["apple", "banana", "orange"]
separator = ","
result = separator.join(my_list)
print(result)
# этот код 
apple,banana,orange
# выведет это

item[START:STOP:STEP] # item - название списка, строки или мешаного списка
                      # start - индекс первого элемента среза(убереться кол-ство элементов сначала)
                      # stop - индекс последнего элемента среза (убереться с конце среза).
                      # step - интервал между элементами среза(если поставить 2 то будет перепрыгивать и брать каждый второй элемент).

КОРТЕЖИ(tuple)

# Кортежи нельзя изменять. Кортежи занимают меньше памяти
# функции которые есть у списка могут работать и с кортежем, кроме тех которые добавляют чтото или удаляют
data = 1, 4, 6, 2, 3.6, True 
# если не ставить никаких скобочек то компилятор будет принимать это как кортеж
data = (5,)
# если мы хотим что бы кортеж состоял из одного значения то надо ставить запятую и после нее ничего не писать 
new_data = tuple(название списка)
# в tuple передаем название списка которы хотим преобразовать в кортеж
data.__sizeof__() 
# получаем размер списка а (в байтах)

СЛОВАРИ (DICT) И РАБОТА С НИМИ

